datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id])

  @@map("accounts")
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role      @default(STUDENT)
  accounts       Account[]
  sessions       Session[]
  passwordResetTokens PasswordResetToken[]
  courses        Course[]
  quizSessions   QuizSession[]
  examSessions   ExamSession[]
  exams          Exam[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@map("verification_tokens")
}

// Model for password reset tokens
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Course {
  id           String   @id @default(cuid())
  title        String
  description  String
  instructorId String
  duration     Int      // in minutes
  createdAt    DateTime @default(now())
  category     String   @default("General")
  image        String?
  instructor   User   @relation(fields: [instructorId], references: [id])
  modules     Module[]    // related modules of the course
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int       // ordering of modules
  courseId  String
  contents  Content[] // items within the module

  course    Course    @relation(fields: [courseId], references: [id])
}

model Content {
  id        String      @id @default(cuid())
  moduleId  String
  type      ContentType
  title     String      // title or description of the item
  url       String      // link or file path
  meetingId String?
  joinUrl   String?
  startTime DateTime?
  duration  Int?
  order     Int         // ordering within module
  requiresProctoring Boolean     @default(false)
  quizSessions   QuizSession[]
  questions      QuizQuestion[]
  module    Module      @relation(fields: [moduleId], references: [id])
}

// Tracks a user’s quiz session, including proctoring flags
model QuizSession {
  id                 String      @id @default(cuid())
  contentId          String
  userId             String
  startedAt          DateTime    @default(now())
  endedAt            DateTime?
  requiresProctoring Boolean     @default(false)
  proctoringActive   Boolean     @default(false)
  events             QuizEvent[]
  content            Content     @relation(fields: [contentId], references: [id])
  user               User        @relation(fields: [userId], references: [id])
}

// Logs proctoring events (e.g., tab switches, face lost)
model QuizEvent {
  id         String      @id @default(cuid())
  sessionId  String
  type       String      // e.g. 'tab-switch', 'face-lost'
  timestamp  DateTime    @default(now())
  session    QuizSession @relation(fields: [sessionId], references: [id])
}

// Questions for QUIZ content items
model QuizQuestion {
  id            String   @id @default(cuid())
  contentId     String
  prompt        String
  options       Json
  correctOption Int
  content       Content  @relation(fields: [contentId], references: [id])
  @@map("quiz_questions")
}

// Standalone secure exams
model Exam {
  id          String          @id @default(cuid())
  title       String
  description String?
  isSecure    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id])
  questions   ExamQuestion[]
  sessions   ExamSession[]
}

model ExamQuestion {
  id            String   @id @default(cuid())
  examId        String
  prompt        String
  options       Json
  correctOption Int
  exam          Exam     @relation(fields: [examId], references: [id])
  @@map("exam_questions")
}

// Tracks a user’s exam session for proctoring
model ExamSession {
  id                String        @id @default(cuid())
  examId            String
  userId            String
  startedAt         DateTime      @default(now())
  endedAt           DateTime?
  requiresProctoring Boolean       @default(true)
  proctoringActive  Boolean       @default(false)
  completed         Boolean       @default(false)
  answers           Json?         // Stores the user's answers as a JSON object
  score             Float?        // Percentage score
  events            ExamSessionEvent[]
  
  exam              Exam          @relation(fields: [examId], references: [id])
  user              User          @relation(fields: [userId], references: [id])

  @@map("exam_sessions")
}

model ExamSessionEvent {
  id         String        @id @default(cuid())
  sessionId  String
  type       String
  timestamp  DateTime      @default(now())
  metadata   Json?         // Stores additional event data like WebRTC signals

  session    ExamSession   @relation(fields: [sessionId], references: [id])

  @@map("exam_session_events")
}

// Types of content items within modules
enum ContentType {
  VIDEO
  PDF
  LIVE
  QUIZ
  ASSIGNMENT
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}
